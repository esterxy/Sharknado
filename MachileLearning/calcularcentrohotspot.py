# -*- coding: utf-8 -*-
"""CalcularCentroHotspot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qs6kWr0sl3McBUV_n6UwkAXPEP-9qfVy
"""

# Script para calcular o "centro de gravidade" (centroid) do principal
# cluster de avistamentos de tubarões.
# Responsável: Gustavo

import pandas as pd
import numpy as np
from sklearn.cluster import DBSCAN

def calcular_hotspot_principal():
    """
    Lê os dados de avistamento, encontra o maior cluster de pontos
    e calcula o seu centro geográfico.
    """
    # --- 1. Carregar e Filtrar os Dados ---
    print("1. A carregar e a filtrar os dados de avistamento (target=1)...")
    try:
        df = pd.read_csv("dataset_enriquecido.csv")
    except FileNotFoundError:
        print("\n--- ERRO ---: O ficheiro 'dataset_enriquecido.csv' não foi encontrado.")
        return

    # Filtra apenas os pontos onde houve avistamentos reais
    df_positivos = df[df['target'] == 1].copy()

    if len(df_positivos) == 0:
        print("Nenhum dado de avistamento (target=1) encontrado no ficheiro.")
        return

    print(f"   - {len(df_positivos)} pontos de avistamento encontrados.")

    # --- 2. Encontrar o Cluster Principal com DBSCAN ---
    print("\n2. A identificar o principal agrupamento de avistamentos (cluster)...")

    # Prepara as coordenadas para o algoritmo
    coords = df_positivos[['latitude', 'longitude']].values

    # Converte graus para radianos para usar a métrica 'haversine' (distância em esfera)
    coords_rad = np.radians(coords)

    # eps é a distância máxima entre dois pontos para serem considerados vizinhos.
    # 0.1 radianos é aproximadamente 637 km, um valor grande para garantir que apanhamos o cluster principal.
    # Vamos usar uma distância menor, ex: 100km. 100 km / 6371 km (raio da Terra) ~= 0.015 radianos.
    db = DBSCAN(eps=0.02, min_samples=3, metric='haversine').fit(coords_rad)

    # Adiciona os rótulos do cluster ao DataFrame
    df_positivos['cluster'] = db.labels_

    # Encontra qual é o maior cluster (ignorando o cluster -1, que são os outliers)
    if len(df_positivos[df_positivos['cluster'] != -1]) > 0:
        maior_cluster_id = df_positivos[df_positivos['cluster'] != -1]['cluster'].mode()[0]

        # Filtra o DataFrame para conter apenas os pontos do maior cluster
        df_hotspot = df_positivos[df_positivos['cluster'] == maior_cluster_id]

        print(f"   - Cluster principal identificado (ID: {maior_cluster_id}) com {len(df_hotspot)} pontos.")
    else:
        print("   - Nenhum cluster significativo encontrado. A usar todos os pontos.")
        df_hotspot = df_positivos # Usa todos os pontos se nenhum cluster for formado

    # --- 3. Calcular o Centro do Hotspot (Centroid) ---
    print("\n3. A calcular o centro geográfico do hotspot...")

    centro_lat = df_hotspot['latitude'].mean()
    centro_lon = df_hotspot['longitude'].mean()

    # --- 4. Apresentar o Resultado ---
    print("\n" + "="*50)
    print("--- LOCAL MAIS COMUM DE AVISTAMENTO (CENTRO DO HOTSPOT) ---")
    print(f"Com base nos dados fornecidos, o centro do principal hotspot é:")
    print(f"   - Latitude: {centro_lat:.4f}")
    print(f"   - Longitude: {centro_lon:.4f}")
    print("="*50)

# --- Ponto de Entrada do Script ---
if __name__ == "__main__":
    calcular_hotspot_principal()