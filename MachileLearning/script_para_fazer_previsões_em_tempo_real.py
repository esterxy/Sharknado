# -*- coding: utf-8 -*-
"""Script para Fazer Previsões em Tempo Real

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xEOLy9ajvN-U46kjtSrWkOwZy5g6_sNx
"""

import pandas as pd
import numpy as np
import joblib
import os
import requests
from io import StringIO
from datetime import datetime
from google.colab import files

from google.colab import drive
drive.mount('/content/drive')

# Script para usar o modelo de IA treinado e fazer novas previsões
# com dados introduzidos manualmente pelo utilizador. 100% OFFLINE.
# Responsável: Gustavo

# --- CONFIGURAÇÕES ---
NOME_FICHEIRO_MODELO = "modelo_tubarao_v1.pkl"
FEATURES = [
    'sst_c',
    'proximidade_colonia_km',
    'profundidade_m',
    'declive_graus',
    'clorofila_mg_m3',
    'energia_dinamica_score'
]

def obter_dados_manualmente():
    """
    Pede ao utilizador para introduzir cada um dos parâmetros necessários.
    """
    print("\n--- Por favor, introduza os dados do ambiente para a previsão ---")
    dados = {}

    # Dicionário com as perguntas e exemplos para cada feature
    perguntas = {
        'sst_c': "Temperatura da Superfície do Mar (°C) (ex: 16.5): ",
        'proximidade_colonia_km': "Proximidade da Colónia de Focas (km) (ex: 15): ",
        'profundidade_m': "Profundidade (metros) (ex: 150): ",
        'declive_graus': "Declive do Fundo do Mar (graus) (ex: 25): ",
        'clorofila_mg_m3': "Clorofila-a (mg/m³) (ex: 2.0): ",
        'energia_dinamica_score': "Energia Dinâmica (score 0.0 a 1.0) (ex: 0.8): "
    }

    for feature in FEATURES:
        while True:
            try:
                valor = float(input(perguntas[feature]))
                dados[feature] = valor
                break
            except ValueError:
                print("   -> Erro: Por favor, introduza um número válido.")

    return pd.DataFrame([dados])

def fazer_previsao_manual():
    """
    Função principal que pede os dados, carrega o modelo e calcula a probabilidade.
    """
    # 1. Obter os dados de entrada do utilizador
    dados_para_prever = obter_dados_manualmente()

    print("\n   - Dados de entrada para o modelo:")
    print(dados_para_prever.iloc[0].to_string())

    # 2. Carregar o modelo de IA
    print(f"\n2. A carregar o modelo de IA do ficheiro '{NOME_FICHEIRO_MODELO}'...")
    try:
        modelo_carregado = joblib.load(NOME_FICHEIRO_MODELO)
    except FileNotFoundError:
        print(f"\n--- ERRO ---: O ficheiro do modelo '{NOME_FICHEIRO_MODELO}' não foi encontrado.")
        print("Certifique-se de que o ficheiro está na mesma pasta que este script e que o modelo foi treinado.")
        return

    # 3. Fazer a previsão
    print("\n3. A calcular a probabilidade...")
    probabilidade = modelo_carregado.predict_proba(dados_para_prever)[:, 1][0]

    # 4. Apresentar o resultado
    print("\n" + "="*40)
    print("--- RESULTADO DA PREVISÃO ---")
    print(f"Com base nos dados fornecidos, a probabilidade de avistamento de um tubarão-branco é de: {probabilidade * 100:.2f}%")
    print("="*40)

# --- Ponto de Entrada do Script ---
if __name__ == "__main__":
    print("--- Ferramenta de Previsão de Hotspots (Modo Manual) ---")
    fazer_previsao_manual()